<?php

/*
|--------------------------------------------------------------------------
| Account Factories
|--------------------------------------------------------------------------
|
| Here you may define all of your model factories. Model factories give
| you a convenient way to create models for testing and seeding your
| database. Just tell the factory how a default model should look.
|
*/
use Carbon\Carbon;

/** @var \Illuminate\Database\Eloquent\Factory $factory */
$factory->define(App\Account::class, function (Faker\Generator $faker) {
    static $password;

    return [
        'name' => $faker->name,
        'email' => $faker->unique()->safeEmail,
        'password' => $password ?: $password = bcrypt('secret'),
        // 'remember_token' => str_random(10),
        'created_at' => Carbon::createFromTimeStamp(
            $faker->dateTimeThisMonth()->getTimestamp()),
        'updated_at' => Carbon::now()->format('Y-m-d H:i:s'),
        'amount' => '1000000'
    ];
});

$factory->define(App\trade::class, function(Faker\Generator $faker) use($factory){
    $price = $faker->numberBetween(1,1000);
    $commission = 4.99;
    $qty = $faker->numberBetween(1,1000);
    $buy_sell = 'buy';
    $total_value = $buy_sell === 'buy' ? $price * $qty + $commission : $price * $qty + $commission; 
    return[
        'U_id' => $factory->create(App\Account::class)->id,
        'symbol' => DB::table('stock_symbols')->inRandomOrder()->first()->symbol,
        // 'buy_sell' => rand(0,1) ==0 ?'buy' :'sell',
        'buy_sell' => 'buy',
        'price' => $price,
        'time' => Carbon::createFromTimeStamp(
            $faker->dateTimeThisMonth()->getTimestamp()),
        'quantity' => $qty,
        'commission' => 4.99,
        'total_value' => $total_value,
        'status' => rand(0,1) == 0 ?'done' :'fail',
        'account_value' => 1000000 + round($faker->randomFloat(NULL, -40000, 50000), 2) 
    ];
});

$factory->define(App\watchlist::class, function(Faker\Generator $faker) use($factory){
    return[
        'U_id' => $factory->create(App\Account::class)->id,
        'symbol' => DB::table('stock_symbols')->inRandomOrder()->first()->symbol
        
    ];
});

$factory->define(App\hold::class, function(Faker\Generator $faker) use($factory){
    return[
        'U_id' => $factory->create(App\Account::class)->id,
        'symbol' => DB::table('stock_symbols')->inRandomOrder()->first()->symbol,
        'quantity' => $faker->numberBetween(0,50)
    ];

});


